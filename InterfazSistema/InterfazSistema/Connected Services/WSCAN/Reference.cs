//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InterfazSistema.WSCAN {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WSCAN.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService/GetDataUsingDataContractResponse")]
        InterfazSistema.WSCAN.CompositeType GetDataUsingDataContract(InterfazSistema.WSCAN.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<InterfazSistema.WSCAN.CompositeType> GetDataUsingDataContractAsync(InterfazSistema.WSCAN.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Prueba", ReplyAction="http://tempuri.org/IService/PruebaResponse")]
        string Prueba();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Prueba", ReplyAction="http://tempuri.org/IService/PruebaResponse")]
        System.Threading.Tasks.Task<string> PruebaAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerFechaServidor", ReplyAction="http://tempuri.org/IService/ObtenerFechaServidorResponse")]
        System.DateTime ObtenerFechaServidor();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerFechaServidor", ReplyAction="http://tempuri.org/IService/ObtenerFechaServidorResponse")]
        System.Threading.Tasks.Task<System.DateTime> ObtenerFechaServidorAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RecibeMovtos", ReplyAction="http://tempuri.org/IService/RecibeMovtosResponse")]
        string RecibeMovtos(string idregion, string idmarca, string idzona, int servicio, string autobus, string protocolo, int IdDireccion, int IdRegionOperativa, byte[] movtos, int numeromovtos);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RecibeMovtos", ReplyAction="http://tempuri.org/IService/RecibeMovtosResponse")]
        System.Threading.Tasks.Task<string> RecibeMovtosAsync(string idregion, string idmarca, string idzona, int servicio, string autobus, string protocolo, int IdDireccion, int IdRegionOperativa, byte[] movtos, int numeromovtos);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerCodigoDescarga", ReplyAction="http://tempuri.org/IService/ObtenerCodigoDescargaResponse")]
        string ObtenerCodigoDescarga(string _idRegion, string _idMarca, string _idZona, int _servicio, string _autobus, int _operador, string _lat, string _lon, string _ns, string _we, double _ultvel, string _ip, string _versioneSistemas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerCodigoDescarga", ReplyAction="http://tempuri.org/IService/ObtenerCodigoDescargaResponse")]
        System.Threading.Tasks.Task<string> ObtenerCodigoDescargaAsync(string _idRegion, string _idMarca, string _idZona, int _servicio, string _autobus, int _operador, string _lat, string _lon, string _ns, string _we, double _ultvel, string _ip, string _versioneSistemas);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CopiarMovtosCanX", ReplyAction="http://tempuri.org/IService/CopiarMovtosCanXResponse")]
        bool CopiarMovtosCanX(string _numautobus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CopiarMovtosCanX", ReplyAction="http://tempuri.org/IService/CopiarMovtosCanXResponse")]
        System.Threading.Tasks.Task<bool> CopiarMovtosCanXAsync(string _numautobus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerTablasVerServer", ReplyAction="http://tempuri.org/IService/ObtenerTablasVerServerResponse")]
        string[] ObtenerTablasVerServer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ObtenerTablasVerServer", ReplyAction="http://tempuri.org/IService/ObtenerTablasVerServerResponse")]
        System.Threading.Tasks.Task<string[]> ObtenerTablasVerServerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegsServer", ReplyAction="http://tempuri.org/IService/RegsServerResponse")]
        System.Data.DataTable RegsServer(string StrQuery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RegsServer", ReplyAction="http://tempuri.org/IService/RegsServerResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> RegsServerAsync(string StrQuery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RecibeLogVMD", ReplyAction="http://tempuri.org/IService/RecibeLogVMDResponse")]
        string RecibeLogVMD(byte[] logVMD, int numeroLog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RecibeLogVMD", ReplyAction="http://tempuri.org/IService/RecibeLogVMDResponse")]
        System.Threading.Tasks.Task<string> RecibeLogVMDAsync(byte[] logVMD, int numeroLog);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : InterfazSistema.WSCAN.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<InterfazSistema.WSCAN.IService>, InterfazSistema.WSCAN.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public InterfazSistema.WSCAN.CompositeType GetDataUsingDataContract(InterfazSistema.WSCAN.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<InterfazSistema.WSCAN.CompositeType> GetDataUsingDataContractAsync(InterfazSistema.WSCAN.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public string Prueba() {
            return base.Channel.Prueba();
        }
        
        public System.Threading.Tasks.Task<string> PruebaAsync() {
            return base.Channel.PruebaAsync();
        }
        
        public System.DateTime ObtenerFechaServidor() {
            return base.Channel.ObtenerFechaServidor();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> ObtenerFechaServidorAsync() {
            return base.Channel.ObtenerFechaServidorAsync();
        }
        
        public string RecibeMovtos(string idregion, string idmarca, string idzona, int servicio, string autobus, string protocolo, int IdDireccion, int IdRegionOperativa, byte[] movtos, int numeromovtos) {
            return base.Channel.RecibeMovtos(idregion, idmarca, idzona, servicio, autobus, protocolo, IdDireccion, IdRegionOperativa, movtos, numeromovtos);
        }
        
        public System.Threading.Tasks.Task<string> RecibeMovtosAsync(string idregion, string idmarca, string idzona, int servicio, string autobus, string protocolo, int IdDireccion, int IdRegionOperativa, byte[] movtos, int numeromovtos) {
            return base.Channel.RecibeMovtosAsync(idregion, idmarca, idzona, servicio, autobus, protocolo, IdDireccion, IdRegionOperativa, movtos, numeromovtos);
        }
        
        public string ObtenerCodigoDescarga(string _idRegion, string _idMarca, string _idZona, int _servicio, string _autobus, int _operador, string _lat, string _lon, string _ns, string _we, double _ultvel, string _ip, string _versioneSistemas) {
            return base.Channel.ObtenerCodigoDescarga(_idRegion, _idMarca, _idZona, _servicio, _autobus, _operador, _lat, _lon, _ns, _we, _ultvel, _ip, _versioneSistemas);
        }
        
        public System.Threading.Tasks.Task<string> ObtenerCodigoDescargaAsync(string _idRegion, string _idMarca, string _idZona, int _servicio, string _autobus, int _operador, string _lat, string _lon, string _ns, string _we, double _ultvel, string _ip, string _versioneSistemas) {
            return base.Channel.ObtenerCodigoDescargaAsync(_idRegion, _idMarca, _idZona, _servicio, _autobus, _operador, _lat, _lon, _ns, _we, _ultvel, _ip, _versioneSistemas);
        }
        
        public bool CopiarMovtosCanX(string _numautobus) {
            return base.Channel.CopiarMovtosCanX(_numautobus);
        }
        
        public System.Threading.Tasks.Task<bool> CopiarMovtosCanXAsync(string _numautobus) {
            return base.Channel.CopiarMovtosCanXAsync(_numautobus);
        }
        
        public string[] ObtenerTablasVerServer() {
            return base.Channel.ObtenerTablasVerServer();
        }
        
        public System.Threading.Tasks.Task<string[]> ObtenerTablasVerServerAsync() {
            return base.Channel.ObtenerTablasVerServerAsync();
        }
        
        public System.Data.DataTable RegsServer(string StrQuery) {
            return base.Channel.RegsServer(StrQuery);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> RegsServerAsync(string StrQuery) {
            return base.Channel.RegsServerAsync(StrQuery);
        }
        
        public string RecibeLogVMD(byte[] logVMD, int numeroLog) {
            return base.Channel.RecibeLogVMD(logVMD, numeroLog);
        }
        
        public System.Threading.Tasks.Task<string> RecibeLogVMDAsync(byte[] logVMD, int numeroLog) {
            return base.Channel.RecibeLogVMDAsync(logVMD, numeroLog);
        }
    }
}
